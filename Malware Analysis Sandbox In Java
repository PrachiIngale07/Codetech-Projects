import java.io.*;
import java.net.*;
import java.nio.file.*;
import java.util.*;
import java.lang.management.*;

public class MalwareSandbox {

    // Method to simulate execution of malware
    public static void executeMalware(String command) {
        try {
            Process process = Runtime.getRuntime().exec(command);
            System.out.println("Executing malware sample...");
            monitorProcessBehavior(process);
        } catch (IOException e) {
            System.out.println("Error executing malware: " + e.getMessage());
        }
    }

    // Method to monitor process behavior like CPU and memory usage
    public static void monitorProcessBehavior(Process process) {
        System.out.println("Monitoring malware behavior...");

        Thread monitorThread = new Thread(() -> {
            try {
                while (process.isAlive()) {
                    // CPU and memory usage monitoring
                    long usedMemory = getMemoryUsage();
                    double cpuLoad = getCpuLoad();

                    System.out.println("CPU Usage: " + cpuLoad + "%, Memory Usage: " + usedMemory + " MB");

                    Thread.sleep(2000);  // Monitor every 2 seconds
                }
            } catch (Exception e) {
                System.out.println("Error monitoring process: " + e.getMessage());
            }
        });

        monitorThread.start();
    }

    // Method to capture network activity
    public static void captureNetworkActivity(String host) {
        try (Socket socket = new Socket(host, 80)) {
            System.out.println("Malware attempting network connection to: " + host);
            OutputStream os = socket.getOutputStream();
            os.write("GET / HTTP/1.1\r\n\r\n".getBytes());
            os.flush();
            InputStream is = socket.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(is));
            String responseLine;
            while ((responseLine = reader.readLine()) != null) {
                System.out.println("Network Response: " + responseLine);
            }
        } catch (IOException e) {
            System.out.println("Network activity failed: " + e.getMessage());
        }
    }

    // Method to track file operations (Create/Delete/Modify)
    public static void trackFileOperations(String dirPath) throws IOException {
        Path path = Paths.get(dirPath);
        WatchService watchService = FileSystems.getDefault().newWatchService();

        path.register(watchService, StandardWatchEventKinds.ENTRY_CREATE,
                StandardWatchEventKinds.ENTRY_DELETE, StandardWatchEventKinds.ENTRY_MODIFY);

        System.out.println("Monitoring file system changes in: " + dirPath);

        Thread fileMonitorThread = new Thread(() -> {
            while (true) {
                try {
                    WatchKey key = watchService.take();
                    for (WatchEvent<?> event : key.pollEvents()) {
                        System.out.println("File Operation: " + event.kind() + " - " + event.context());
                    }
                    key.reset();
                } catch (InterruptedException e) {
                    System.out.println("File system monitoring interrupted.");
                }
            }
        });

        fileMonitorThread.start();
    }

    // Helper method to get memory usage in MB
    public static long getMemoryUsage() {
        MemoryMXBean memoryBean = ManagementFactory.getMemoryMXBean();
        long usedMemory = memoryBean.getHeapMemoryUsage().getUsed();
        return usedMemory / (1024 * 1024);
    }

    // Helper method to get CPU load percentage
    public static double getCpuLoad() {
        OperatingSystemMXBean osBean = ManagementFactory.getOperatingSystemMXBean();
        return ((com.sun.management.OperatingSystemMXBean) osBean).getProcessCpuLoad() * 100;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Execute malware
        System.out.println("Enter the malware command to execute: ");
        String command = scanner.nextLine();
        executeMalware(command);

        // Monitor file operations
        System.out.println("Enter the directory path to monitor for file changes: ");
        String dirPath = scanner.nextLine();
        try {
            trackFileOperations(dirPath);
        } catch (IOException e) {
            System.out.println("Error monitoring file system: " + e.getMessage());
        }

        // Simulate network activity capture
        System.out.println("Enter the host to simulate malware network connection: ");
        String host = scanner.nextLine();
        captureNetworkActivity(host);
    }
}
